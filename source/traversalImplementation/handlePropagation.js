"use strict";var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");Object.defineProperty(exports, "__esModule", { value: true });exports.chronological_implementationUsingWhileLoop = exports.chronological = exports.allPromise = exports.raceFirstPromise = void 0;var _skipFirstGeneratorNext2 = _interopRequireDefault(require("@babel/runtime/helpers/skipFirstGeneratorNext"));var _promiseProperRace = _interopRequireDefault(require("@dependency/promiseProperRace"));let _original_raceFirstPromise = async function*






raceFirstPromise({ nodeIteratorFeed, emit }) {let _functionSent = yield;
  let g = { iterator: nodeIteratorFeed };
  g.result = await g.iterator.next();
  let nodePromiseArray = [];
  while (!g.result.done) {
    let nodeData = g.result.value;
    _functionSent = yield { node: nodeData };
    let { promise } = _functionSent;
    nodePromiseArray.push(promise);
    g.result = await g.iterator.next();
  }
  let nodeResolvedResult = await (0, _promiseProperRace.default)(nodePromiseArray).
  then(resolvedPromiseArray => {
    return resolvedPromiseArray[0];
  }).
  catch(error => {
    if (process.env.SZN_DEBUG == 'true') console.error(`üîÄ‚ö†Ô∏è promiseProperRace rejected because: ${error}`);else
    console.log(`üîÄ‚ö†Ô∏è promiseProperRace rejected because: ${error}`);
  });
  if (nodeResolvedResult) {
    emit(nodeResolvedResult);
    return [nodeResolvedResult];
  }
},_modified_raceFirstPromise = (0, _skipFirstGeneratorNext2.default)(_original_raceFirstPromise);let raceFirstPromise = new Proxy(_original_raceFirstPromise, { apply(target, thisArgument, argumentsList) {return Reflect.apply(_modified_raceFirstPromise, thisArgument, argumentsList);} });exports.raceFirstPromise = raceFirstPromise;let _original_allPromise = async function*




allPromise({ nodeIteratorFeed, emit }) {let _functionSent2 = yield;
  let g = { iterator: nodeIteratorFeed };
  g.result = await g.iterator.next();
  let nodePromiseArray = [];
  let resolvedOrderedNodeResolvedResult = [];
  while (!g.result.done) {
    let nodeData = g.result.value;
    _functionSent2 = yield { node: nodeData };
    let { promise } = _functionSent2;
    nodePromiseArray.push(promise);
    promise.then(result => emit(result));
    promise.then(result => resolvedOrderedNodeResolvedResult.push(result));
    g.result = await g.iterator.next();
  }

  let nodeResolvedResultArray = await Promise.all(nodePromiseArray).catch(error => {
    if (process.env.SZN_DEBUG == 'true') console.error(`üîÄ‚ö†Ô∏è \`Promise.all\` for nodeConnectionArray rejected because: ${error}`);else
    console.log(error);
  });

  return resolvedOrderedNodeResolvedResult;





},_modified_allPromise = (0, _skipFirstGeneratorNext2.default)(_original_allPromise);let allPromise = new Proxy(_original_allPromise, { apply(target, thisArgument, argumentsList) {return Reflect.apply(_modified_allPromise, thisArgument, argumentsList);} });exports.allPromise = allPromise;let _original_chronological = async function*




chronological({ nodeIteratorFeed, emit }) {let _functionSent3 = yield;
  let nodeResultList = [];
  for await (let nodeData of nodeIteratorFeed) {
    _functionSent3 = yield { node: nodeData };
    let { promise } = _functionSent3;
    let nextResult = await promise;
    emit(nextResult);
    nodeResultList.push(nextResult);
  }
  return nodeResultList;
},_modified_chronological = (0, _skipFirstGeneratorNext2.default)(_original_chronological);let chronological = new Proxy(_original_chronological, { apply(target, thisArgument, argumentsList) {return Reflect.apply(_modified_chronological, thisArgument, argumentsList);} });exports.chronological = chronological;let _original_chronological_implementationUsingWhileLoop = async function*


chronological_implementationUsingWhileLoop({ nodeIteratorFeed, emit }) {let _functionSent4 = yield;
  let nodeResultList = [];
  let g = { iterator: nodeIteratorFeed };
  g.result = await g.iterator.next();
  while (!g.result.done) {
    let nodeData = g.result.value;
    _functionSent4 = yield { node: nodeData };
    let { promise } = _functionSent4;
    let nextResult = await promise;
    emit(nextResult);
    nodeResultList.push(nextResult);
    g.result = await g.iterator.next();
  }
  return nodeResultList;
},_modified_chronological_implementationUsingWhileLoop = (0, _skipFirstGeneratorNext2.default)(_original_chronological_implementationUsingWhileLoop);let chronological_implementationUsingWhileLoop = new Proxy(_original_chronological_implementationUsingWhileLoop, { apply(target, thisArgument, argumentsList) {return Reflect.apply(_modified_chronological_implementationUsingWhileLoop, thisArgument, argumentsList);} });exports.chronological_implementationUsingWhileLoop = chronological_implementationUsingWhileLoop;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,