"use strict";var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");Object.defineProperty(exports, "__esModule", { value: true });exports.portNextImplementation = void 0;var _skipFirstGeneratorNext2 = _interopRequireDefault(require("@babel/runtime/helpers/skipFirstGeneratorNext"));var _promiseProperRace = _interopRequireDefault(require("@dependency/promiseProperRace"));let _original_portNextImplementation = async function*








portNextImplementation({ forkEdge, additionalChildNode, graphInstance }) {let _functionSent = yield;
  let { eventEmitterCallback: emit } = _functionSent;
  let portNode = forkEdge.destination;
  let handlePropagationFunctionName = portNode.properties.handlePropagationImplementation || 'chronological';

  let nodeIteratorFeed = await iterateNext({ node: forkEdge.destination, additionalChildNode, graphInstance });
  let traversalIteratorFeed = handlePropagationMethod[handlePropagationFunctionName]({ nodeIteratorFeed, emit });let _original_trapAsyncIterator = async function*
  trapAsyncIterator(iterator) {let _functionSent2 = yield;
    let iteratorResult = await iterator.next();
    while (!iteratorResult.done) {
      let traversalConfig = iteratorResult.value;
      _functionSent2 = yield traversalConfig;
      let { promise } = _functionSent2;
      iteratorResult = await iterator.next({ promise });
    }
    return iteratorResult.value;
  },_modified_trapAsyncIterator = (0, _skipFirstGeneratorNext2.default)(_original_trapAsyncIterator);let trapAsyncIterator;trapAsyncIterator = new Proxy(_original_trapAsyncIterator, { apply(target, thisArgument, argumentsList) {return Reflect.apply(_modified_trapAsyncIterator, thisArgument, argumentsList);} });
  return _functionSent = yield* trapAsyncIterator(traversalIteratorFeed);
},_modified_portNextImplementation = (0, _skipFirstGeneratorNext2.default)(_original_portNextImplementation);let portNextImplementation = new Proxy(_original_portNextImplementation, { apply(target, thisArgument, argumentsList) {return Reflect.apply(_modified_portNextImplementation, thisArgument, argumentsList);} });exports.portNextImplementation = portNextImplementation;





async function* iterateNext({ node, additionalChildNode, graphInstance } = {}) {
  const { nextArray } = await graphInstance.databaseWrapper.getNext({ concreteDatabase: graphInstance.database, nodeID: node.identity });
  if (nextArray.length == 0) return;


  nextArray.sort((former, latter) => {var _former$connection$pr, _latter$connection$pr;return ((_former$connection$pr = former.connection.properties) === null || _former$connection$pr === void 0 ? void 0 : _former$connection$pr.order) - ((_latter$connection$pr = latter.connection.properties) === null || _latter$connection$pr === void 0 ? void 0 : _latter$connection$pr.order);});

  for (let next of nextArray) {

    let insertAdditional = additionalChildNode.reduce(
    (accumolator, additional, index, array) => {
      if (additional.placement.connectionKey == next.connection.properties.key) {

        accumolator[additional.placement.position].push(additional.node) && delete array[index];
      }
      return accumolator;
    },
    { before: [], after: [] });

    additionalChildNode = additionalChildNode.filter(n => n);


    for (let nextNode of [...insertAdditional.before, next.destination, ...insertAdditional.after]) {
      yield nextNode;
    }
  }
}




const handlePropagationMethod = {



  raceFirstPromise: (function () {let _ref = async function* ({ nodeIteratorFeed, emit }) {let _functionSent3 = yield;
      let g = { iterator: nodeIteratorFeed };
      g.result = await g.iterator.next();
      let nodePromiseArray = [];
      while (!g.result.done) {
        let nodeData = g.result.value;
        _functionSent3 = yield { node: nodeData };
        let { promise } = _functionSent3;
        nodePromiseArray.push(promise);
        g.result = await g.iterator.next();
      }
      let nodeResolvedResult = await (0, _promiseProperRace.default)(nodePromiseArray).
      then(resolvedPromiseArray => {
        return resolvedPromiseArray[0];
      }).
      catch(error => {
        if (process.env.SZN_DEBUG == 'true') console.error(`üîÄ‚ö†Ô∏è promiseProperRace rejected because: ${error}`);else
        console.log(`üîÄ‚ö†Ô∏è promiseProperRace rejected because: ${error}`);
      });
      if (nodeResolvedResult) {
        emit(nodeResolvedResult);
        return [nodeResolvedResult];
      }
    },_ref2 = (0, _skipFirstGeneratorNext2.default)(_ref);return new Proxy(_ref, { apply(target, thisArgument, argumentsList) {return Reflect.apply(_ref2, thisArgument, argumentsList);} });})(),




  allPromise: (function () {let _ref4 = async function* ({ nodeIteratorFeed, emit }) {let _functionSent4 = yield;
      let g = { iterator: nodeIteratorFeed };
      g.result = await g.iterator.next();
      let nodePromiseArray = [];
      let resolvedOrderedNodeResolvedResult = [];
      while (!g.result.done) {
        let nodeData = g.result.value;
        _functionSent4 = yield { node: nodeData };
        let { promise } = _functionSent4;
        nodePromiseArray.push(promise);
        promise.then(result => emit(result));
        promise.then(result => resolvedOrderedNodeResolvedResult.push(result));
        g.result = await g.iterator.next();
      }

      let nodeResolvedResultArray = await Promise.all(nodePromiseArray).catch(error => {
        if (process.env.SZN_DEBUG == 'true') console.error(`üîÄ‚ö†Ô∏è \`Promise.all\` for nodeConnectionArray rejected because: ${error}`);else
        console.log(error);
      });

      return resolvedOrderedNodeResolvedResult;





    },_ref5 = (0, _skipFirstGeneratorNext2.default)(_ref4);return new Proxy(_ref4, { apply(target, thisArgument, argumentsList) {return Reflect.apply(_ref5, thisArgument, argumentsList);} });})(),




  chronological: (function () {let _ref7 = async function* ({ nodeIteratorFeed, emit }) {let _functionSent5 = yield;
      let nodeResultList = [];
      for await (let nodeData of nodeIteratorFeed) {
        _functionSent5 = yield { node: nodeData };
        let { promise } = _functionSent5;
        let nextResult = await promise;
        emit(nextResult);
        nodeResultList.push(nextResult);
      }
      return nodeResultList;
    },_ref8 = (0, _skipFirstGeneratorNext2.default)(_ref7);return new Proxy(_ref7, { apply(target, thisArgument, argumentsList) {return Reflect.apply(_ref8, thisArgument, argumentsList);} });})(),


  chronological_implementationUsingWhileLoop: (function () {let _ref10 = async function* ({ nodeIteratorFeed, emit }) {let _functionSent6 = yield;
      let nodeResultList = [];
      let g = { iterator: nodeIteratorFeed };
      g.result = await g.iterator.next();
      while (!g.result.done) {
        let nodeData = g.result.value;
        _functionSent6 = yield { node: nodeData };
        let { promise } = _functionSent6;
        let nextResult = await promise;
        emit(nextResult);
        nodeResultList.push(nextResult);
        g.result = await g.iterator.next();
      }
      return nodeResultList;
    },_ref11 = (0, _skipFirstGeneratorNext2.default)(_ref10);return new Proxy(_ref10, { apply(target, thisArgument, argumentsList) {return Reflect.apply(_ref11, thisArgument, argumentsList);} });})() };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,