"use strict";Object.defineProperty(exports, "__esModule", { value: true });var _exportNames = { returnDataItemKey: true, timeout: true, executeFunctionReference: true };exports.returnDataItemKey = returnDataItemKey;exports.timeout = timeout;exports.executeFunctionReference = executeFunctionReference;var _scriptExecution = require("./scriptExecution.js");Object.keys(_scriptExecution).forEach(function (key) {if (key === "default" || key === "__esModule") return;if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;Object.defineProperty(exports, key, { enumerable: true, get: function () {return _scriptExecution[key];} });});
var _middlewareExecution = require("./middlewareExecution.js");Object.keys(_middlewareExecution).forEach(function (key) {if (key === "default" || key === "__esModule") return;if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;Object.defineProperty(exports, key, { enumerable: true, get: function () {return _middlewareExecution[key];} });});
var _templateRendering = require("./templateRendering.js");Object.keys(_templateRendering).forEach(function (key) {if (key === "default" || key === "__esModule") return;if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;Object.defineProperty(exports, key, { enumerable: true, get: function () {return _templateRendering[key];} });});
var _schema = require("./schema.js");Object.keys(_schema).forEach(function (key) {if (key === "default" || key === "__esModule") return;if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;Object.defineProperty(exports, key, { enumerable: true, get: function () {return _schema[key];} });});




async function returnDataItemKey({ stageNode, processNode, traverser = this, nextProcessData }, { additionalParameter, traverseCallContext }) {var _processNode$properti, _processNode$properti2;
  if ((_processNode$properti = processNode.properties) === null || _processNode$properti === void 0 ? void 0 : _processNode$properti.name) return `${(_processNode$properti2 = processNode.properties) === null || _processNode$properti2 === void 0 ? void 0 : _processNode$properti2.name}`;
}


async function timeout({ stageNode, processNode, traverser = this, nextProcessData }, { additionalParameter, traverseCallContext }) {var _processNode$properti3, _processNode$properti4;
  if (typeof ((_processNode$properti3 = processNode.properties) === null || _processNode$properti3 === void 0 ? void 0 : _processNode$properti3.timerDelay) != 'number') throw new Error('â€¢ DataItem must have a delay value.');
  let delay = (_processNode$properti4 = processNode.properties) === null || _processNode$properti4 === void 0 ? void 0 : _processNode$properti4.timerDelay;
  return await new Promise((resolve, reject) =>
  setTimeout(() => {var _processNode$properti5;

    resolve((_processNode$properti5 = processNode.properties) === null || _processNode$properti5 === void 0 ? void 0 : _processNode$properti5.name);
  }, delay));

}















async function executeFunctionReference({ stageNode, processNode, traverser = this, nextProcessData }, { additionalParameter, traverseCallContext }) {
  let functionCallback = await traverser.traverserInstruction.resourceResolution.resolveResource.call(traverser, { targetNode: processNode, contextPropertyName: 'functionReferenceContext' });

  try {

    return await functionCallback({ node: processNode, traverser, traverseCallContext });
  } catch (error) {
    console.error(error) && process.exit();
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NvdXJjZS90cmF2ZXJzYWxJbXBsZW1lbnRhdGlvbi9wcm9jZXNzTm9kZS9pbmRleC5qcyJdLCJuYW1lcyI6WyJyZXR1cm5EYXRhSXRlbUtleSIsInN0YWdlTm9kZSIsInByb2Nlc3NOb2RlIiwidHJhdmVyc2VyIiwibmV4dFByb2Nlc3NEYXRhIiwiYWRkaXRpb25hbFBhcmFtZXRlciIsInRyYXZlcnNlQ2FsbENvbnRleHQiLCJwcm9wZXJ0aWVzIiwibmFtZSIsInRpbWVvdXQiLCJ0aW1lckRlbGF5IiwiRXJyb3IiLCJkZWxheSIsIlByb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0Iiwic2V0VGltZW91dCIsImV4ZWN1dGVGdW5jdGlvblJlZmVyZW5jZSIsImZ1bmN0aW9uQ2FsbGJhY2siLCJ0cmF2ZXJzZXJJbnN0cnVjdGlvbiIsInJlc291cmNlUmVzb2x1dGlvbiIsInJlc29sdmVSZXNvdXJjZSIsInRhcmdldE5vZGUiLCJjb250ZXh0UHJvcGVydHlOYW1lIiwibm9kZSIsImVycm9yIiwiY29uc29sZSIsInByb2Nlc3MiLCJleGl0Il0sIm1hcHBpbmdzIjoiNlNBQUE7QUFDQTtBQUNBO0FBQ0E7Ozs7O0FBS08sZUFBZUEsaUJBQWYsQ0FBaUMsRUFBRUMsU0FBRixFQUFhQyxXQUFiLEVBQTBCQyxTQUFTLEdBQUcsSUFBdEMsRUFBNENDLGVBQTVDLEVBQWpDLEVBQWdHLEVBQUVDLG1CQUFGLEVBQXVCQyxtQkFBdkIsRUFBaEcsRUFBOEk7QUFDbkosK0JBQUlKLFdBQVcsQ0FBQ0ssVUFBaEIsMERBQUksc0JBQXdCQyxJQUE1QixFQUFrQyxPQUFRLEdBQUQsMEJBQUdOLFdBQVcsQ0FBQ0ssVUFBZiwyREFBRyx1QkFBd0JDLElBQUssRUFBdkM7QUFDbkM7OztBQUdNLGVBQWVDLE9BQWYsQ0FBdUIsRUFBRVIsU0FBRixFQUFhQyxXQUFiLEVBQTBCQyxTQUFTLEdBQUcsSUFBdEMsRUFBNENDLGVBQTVDLEVBQXZCLEVBQXNGLEVBQUVDLG1CQUFGLEVBQXVCQyxtQkFBdkIsRUFBdEYsRUFBb0k7QUFDekksTUFBSSxrQ0FBT0osV0FBVyxDQUFDSyxVQUFuQiwyREFBTyx1QkFBd0JHLFVBQS9CLEtBQTZDLFFBQWpELEVBQTJELE1BQU0sSUFBSUMsS0FBSixDQUFVLHFDQUFWLENBQU47QUFDM0QsTUFBSUMsS0FBSyw2QkFBR1YsV0FBVyxDQUFDSyxVQUFmLDJEQUFHLHVCQUF3QkcsVUFBcEM7QUFDQSxTQUFPLE1BQU0sSUFBSUcsT0FBSixDQUFZLENBQUNDLE9BQUQsRUFBVUMsTUFBVjtBQUN2QkMsRUFBQUEsVUFBVSxDQUFDLE1BQU07O0FBRWZGLElBQUFBLE9BQU8sMkJBQUNaLFdBQVcsQ0FBQ0ssVUFBYiwyREFBQyx1QkFBd0JDLElBQXpCLENBQVA7QUFDRCxHQUhTLEVBR1BJLEtBSE8sQ0FEQyxDQUFiOztBQU1EOzs7Ozs7Ozs7Ozs7Ozs7O0FBZ0JNLGVBQWVLLHdCQUFmLENBQXdDLEVBQUVoQixTQUFGLEVBQWFDLFdBQWIsRUFBMEJDLFNBQVMsR0FBRyxJQUF0QyxFQUE0Q0MsZUFBNUMsRUFBeEMsRUFBdUcsRUFBRUMsbUJBQUYsRUFBdUJDLG1CQUF2QixFQUF2RyxFQUFxSjtBQUMxSixNQUFJWSxnQkFBZ0IsR0FBRyxNQUFpQmYsU0FBUyxDQUFDZ0Isb0JBQVYsQ0FBK0JDLGtCQUEvQixDQUFrREMsZUFBN0QsTUFBQWxCLFNBQVMsRUFBb0UsRUFBRW1CLFVBQVUsRUFBRXBCLFdBQWQsRUFBMkJxQixtQkFBbUIsRUFBRSwwQkFBaEQsRUFBcEUsQ0FBdEM7O0FBRUEsTUFBSTs7QUFFRixXQUFPLE1BQU1MLGdCQUFnQixDQUFDLEVBQUVNLElBQUksRUFBRXRCLFdBQVIsRUFBcUJDLFNBQXJCLEVBQWdDRyxtQkFBaEMsRUFBRCxDQUE3QjtBQUNELEdBSEQsQ0FHRSxPQUFPbUIsS0FBUCxFQUFjO0FBQ2RDLElBQUFBLE9BQU8sQ0FBQ0QsS0FBUixDQUFjQSxLQUFkLEtBQXdCRSxPQUFPLENBQUNDLElBQVIsRUFBeEI7QUFDRDtBQUNGIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0ICogZnJvbSAnLi9zY3JpcHRFeGVjdXRpb24uanMnXG5leHBvcnQgKiBmcm9tICcuL21pZGRsZXdhcmVFeGVjdXRpb24uanMnXG5leHBvcnQgKiBmcm9tICcuL3RlbXBsYXRlUmVuZGVyaW5nLmpzJ1xuZXhwb3J0ICogZnJvbSAnLi9zY2hlbWEuanMnXG5cbmltcG9ydCBwYXRoIGZyb20gJ3BhdGgnXG5pbXBvcnQgYXNzZXJ0IGZyb20gJ2Fzc2VydCdcblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHJldHVybkRhdGFJdGVtS2V5KHsgc3RhZ2VOb2RlLCBwcm9jZXNzTm9kZSwgdHJhdmVyc2VyID0gdGhpcywgbmV4dFByb2Nlc3NEYXRhIH0sIHsgYWRkaXRpb25hbFBhcmFtZXRlciwgdHJhdmVyc2VDYWxsQ29udGV4dCB9KSB7XG4gIGlmIChwcm9jZXNzTm9kZS5wcm9wZXJ0aWVzPy5uYW1lKSByZXR1cm4gYCR7cHJvY2Vzc05vZGUucHJvcGVydGllcz8ubmFtZX1gXG59XG5cbi8vIGltcGxlbWVudGF0aW9uIGRlbGF5cyBwcm9taXNlcyBmb3IgdGVzdGluZyBgaXRlcmF0ZUNvbm5lY3Rpb25gIG9mIHByb21pc2VzIGUuZy4gYGFsbFByb21pc2VgLCBgcmFjZUZpcnN0UHJvbWlzZWAsIGV0Yy5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiB0aW1lb3V0KHsgc3RhZ2VOb2RlLCBwcm9jZXNzTm9kZSwgdHJhdmVyc2VyID0gdGhpcywgbmV4dFByb2Nlc3NEYXRhIH0sIHsgYWRkaXRpb25hbFBhcmFtZXRlciwgdHJhdmVyc2VDYWxsQ29udGV4dCB9KSB7XG4gIGlmICh0eXBlb2YgcHJvY2Vzc05vZGUucHJvcGVydGllcz8udGltZXJEZWxheSAhPSAnbnVtYmVyJykgdGhyb3cgbmV3IEVycm9yKCfigKIgRGF0YUl0ZW0gbXVzdCBoYXZlIGEgZGVsYXkgdmFsdWUuJylcbiAgbGV0IGRlbGF5ID0gcHJvY2Vzc05vZGUucHJvcGVydGllcz8udGltZXJEZWxheVxuICByZXR1cm4gYXdhaXQgbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT5cbiAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgIC8vIGNvbnNvbGUubG9nKGAke2RlbGF5fW1zIHBhc3NlZCBmb3Iga2V5ICR7cHJvY2Vzc05vZGUua2V5fS5gKSAvLyBkZWJ1Z1xuICAgICAgcmVzb2x2ZShwcm9jZXNzTm9kZS5wcm9wZXJ0aWVzPy5uYW1lKVxuICAgIH0sIGRlbGF5KSxcbiAgKVxufVxuXG4vKipcbiAqIFJlbGllcyBvbiBmdW5jdGlvbiByZWZlcmVuY2UgY29uY2VwdCAtIHdoZXJlIGEgZnVuY3Rpb24gaXMgY2FsbGVkIGZyb20gdGhlIGdyYXBoIHVzaW5nIGEgbm9kZSBwcm9wZXJ0eSB0aGF0IGhvbGRzIGl0J3MgbmFtZSwgYW5kIGEgY29udGV4dCBvYmplY3QgcGFzc2VkIHRvIHRoZSBncmFwaCB0cmF2ZXJzZXIsIGhvbGRpbmcgdGhlIGZ1bmN0aW9ucyBtYXAuXG4gKiBgcHJvY2Vzc0RhdGFgIGltcGxlbWVudGF0aW9uIG9mIGBncmFwaFRyYXZlcnNhbGAgbW9kdWxlXG4gKiBleGVjdXRlIGZ1bmN0aW9ucyB0aHJvdWdoIGEgc3RyaW5nIHJlZmVyZW5jZSBmcm9tIHRoZSBncmFwaCBkYXRhYmFzZSB0aGF0IG1hdGNoIHRoZSBrZXkgb2YgdGhlIGFwcGxpY2F0aW9uIHJlZmVyZW5jZSBjb250ZXh0IG9iamVjdFxuICogTm90ZTogY3JlYXRpbmcgYSBzaW1pbGFyIGltcGxlbWVudGF0aW9uIHRoYXQgd291bGQgcmV0dXJuIG9ubHkgdGhlIGZ1bmN0aW9ucyBpcyBubyBkaWZmZXJlbnQgdGhhbiByZXR1cm5uaW5nIHRoZSBuYW1lcyBvZiB0aGUgZnVuY3Rpb24sIGFuZCB0aGVuIHVzZSB0aGUgZ3JhcGggcmVzdWx0IGFycmF5IG91dHNpZGUgdGhlIHRyYXZlcnNhbCB0byByZXRyaWV2ZSB0aGUgZnVuY3Rpb24gcmVmZXJlbmNlcyBmcm9tIGFuIG9iamVjdC5cblxuVXNlZCBmb3I6XG4gIC0gdXNlZCBmb3IgZXhlY3V0aW5nIHRhc2tzIGFuZCBjaGVja3MvY29uZGl0aW9uc1xuICAtIE1pZGRsZXdhcmU6XG4gICAgQXBwcm9hY2hlcyBmb3IgbWlkZGxld2FyZSBhZ2dyZWdhdGlvbjogXG4gICAgLSBDcmVhdGVzIG1pZGRsZXdhcmUgYXJyYXkgZnJvbSBncmFwaC0gIFRoZSBncmFwaCB0cmF2ZXJzYWwgQHJldHVybiB7QXJyYXkgb2YgT2JqZWN0c30gd2hlcmUgZWFjaCBvYmplY3QgY29udGFpbnMgaW5zdHJ1Y3Rpb24gc2V0dGluZ3MgdG8gYmUgdXNlZCB0aHJvdWdoIGFuIGltcGxlbWVudGluZyBtb2R1bGUgdG8gYWRkIHRvIGEgY2hhaW4gb2YgbWlkZGxld2FyZXMuIFxuICAgIC0gcmV0dXJuIG1pZGRsZXdhcmUgcmVmZXJlbmNlIG5hbWVzLCBhbmQgdGhlbiBtYXRjaGluZyB0aGUgbmFtZXMgdG8gZnVuY3Rpb24gb3V0c2lkZSB0aGUgdHJhdmVyc2FsLlxuICAgIC0gRXhlY3V0aW5nIGdlbmVyYXRvciBmdW5jdGlvbnMgd2l0aCBub2RlIGFyZ3VtZW50cyB0aGF0IHByb2R1Y2UgbWlkZGxld2FyZSBmdW5jdGlvbnMuXG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBleGVjdXRlRnVuY3Rpb25SZWZlcmVuY2UoeyBzdGFnZU5vZGUsIHByb2Nlc3NOb2RlLCB0cmF2ZXJzZXIgPSB0aGlzLCBuZXh0UHJvY2Vzc0RhdGEgfSwgeyBhZGRpdGlvbmFsUGFyYW1ldGVyLCB0cmF2ZXJzZUNhbGxDb250ZXh0IH0pIHtcbiAgbGV0IGZ1bmN0aW9uQ2FsbGJhY2sgPSBhd2FpdCB0cmF2ZXJzZXI6OnRyYXZlcnNlci50cmF2ZXJzZXJJbnN0cnVjdGlvbi5yZXNvdXJjZVJlc29sdXRpb24ucmVzb2x2ZVJlc291cmNlKHsgdGFyZ2V0Tm9kZTogcHJvY2Vzc05vZGUsIGNvbnRleHRQcm9wZXJ0eU5hbWU6ICdmdW5jdGlvblJlZmVyZW5jZUNvbnRleHQnIH0pXG5cbiAgdHJ5IHtcbiAgICAvLyBQYXNzIHBhcmFtZXRlciBvYmplY3Qgb2YgdHJhdmVyc2VyU3RhdGVcbiAgICByZXR1cm4gYXdhaXQgZnVuY3Rpb25DYWxsYmFjayh7IG5vZGU6IHByb2Nlc3NOb2RlLCB0cmF2ZXJzZXIsIHRyYXZlcnNlQ2FsbENvbnRleHQgfSlcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjb25zb2xlLmVycm9yKGVycm9yKSAmJiBwcm9jZXNzLmV4aXQoKVxuICB9XG59XG4iXX0=