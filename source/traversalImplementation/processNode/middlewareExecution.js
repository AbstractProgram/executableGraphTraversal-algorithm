"use strict";var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");Object.defineProperty(exports, "__esModule", { value: true });exports.immediatelyExecuteMiddleware = void 0;var _assert = _interopRequireDefault(require("assert"));





const immediatelyExecuteMiddleware = async ({ stageNode, processNode, graph = void 0, nextProcessData }, { additionalParameter, traverseCallContext }) => {var _graph$context$middle;
  const { nextFunction } = additionalParameter;
  (0, _assert.default)((_graph$context$middle = graph.context.middlewareParameter) === null || _graph$context$middle === void 0 ? void 0 : _graph$context$middle.context, `â€¢ Middleware graph traversal relies on context.middlewareParameter.context on the graph context instance`);

  let functionCallback = await graph.traverserInstruction.resourceResolution.resolveResource({ targetNode: processNode, graph, contextPropertyName: 'functionReferenceContext' });

  try {
    let middleware = await functionCallback({ node: processNode, graph });
    let context = graph.context.middlewareParameter.context,
    next = nextFunction;
    await middleware(context, next);
    return middleware;
  } catch (error) {
    console.error(error) && process.exit();
  }
};exports.immediatelyExecuteMiddleware = immediatelyExecuteMiddleware;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NvdXJjZS90cmF2ZXJzYWxJbXBsZW1lbnRhdGlvbi9wcm9jZXNzTm9kZS9taWRkbGV3YXJlRXhlY3V0aW9uLmpzIl0sIm5hbWVzIjpbImltbWVkaWF0ZWx5RXhlY3V0ZU1pZGRsZXdhcmUiLCJzdGFnZU5vZGUiLCJwcm9jZXNzTm9kZSIsImdyYXBoIiwibmV4dFByb2Nlc3NEYXRhIiwiYWRkaXRpb25hbFBhcmFtZXRlciIsInRyYXZlcnNlQ2FsbENvbnRleHQiLCJuZXh0RnVuY3Rpb24iLCJjb250ZXh0IiwibWlkZGxld2FyZVBhcmFtZXRlciIsImZ1bmN0aW9uQ2FsbGJhY2siLCJ0cmF2ZXJzZXJJbnN0cnVjdGlvbiIsInJlc291cmNlUmVzb2x1dGlvbiIsInJlc29sdmVSZXNvdXJjZSIsInRhcmdldE5vZGUiLCJjb250ZXh0UHJvcGVydHlOYW1lIiwibWlkZGxld2FyZSIsIm5vZGUiLCJuZXh0IiwiZXJyb3IiLCJjb25zb2xlIiwicHJvY2VzcyIsImV4aXQiXSwibWFwcGluZ3MiOiI4TUFBQTs7Ozs7O0FBTU8sTUFBTUEsNEJBQTRCLEdBQUcsT0FBTyxFQUFFQyxTQUFGLEVBQWFDLFdBQWIsRUFBMEJDLEtBQUssU0FBL0IsRUFBd0NDLGVBQXhDLEVBQVAsRUFBa0UsRUFBRUMsbUJBQUYsRUFBdUJDLG1CQUF2QixFQUFsRSxLQUFtSDtBQUM3SixRQUFNLEVBQUVDLFlBQUYsS0FBbUJGLG1CQUF6QjtBQUNBLGdEQUFPRixLQUFLLENBQUNLLE9BQU4sQ0FBY0MsbUJBQXJCLDBEQUFPLHNCQUFtQ0QsT0FBMUMsRUFBb0QsMEdBQXBEOztBQUVBLE1BQUlFLGdCQUFnQixHQUFHLE1BQU1QLEtBQUssQ0FBQ1Esb0JBQU4sQ0FBMkJDLGtCQUEzQixDQUE4Q0MsZUFBOUMsQ0FBOEQsRUFBRUMsVUFBVSxFQUFFWixXQUFkLEVBQTJCQyxLQUEzQixFQUFrQ1ksbUJBQW1CLEVBQUUsMEJBQXZELEVBQTlELENBQTdCOztBQUVBLE1BQUk7QUFDRixRQUFJQyxVQUFVLEdBQUcsTUFBTU4sZ0JBQWdCLENBQUMsRUFBRU8sSUFBSSxFQUFFZixXQUFSLEVBQXFCQyxLQUFyQixFQUFELENBQXZDO0FBQ0EsUUFBSUssT0FBTyxHQUFHTCxLQUFLLENBQUNLLE9BQU4sQ0FBY0MsbUJBQWQsQ0FBa0NELE9BQWhEO0FBQ0VVLElBQUFBLElBQUksR0FBR1gsWUFEVDtBQUVBLFVBQU1TLFVBQVUsQ0FBQ1IsT0FBRCxFQUFVVSxJQUFWLENBQWhCO0FBQ0EsV0FBT0YsVUFBUDtBQUNELEdBTkQsQ0FNRSxPQUFPRyxLQUFQLEVBQWM7QUFDZEMsSUFBQUEsT0FBTyxDQUFDRCxLQUFSLENBQWNBLEtBQWQsS0FBd0JFLE9BQU8sQ0FBQ0MsSUFBUixFQUF4QjtBQUNEO0FBQ0YsQ0FmTSxDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGFzc2VydCBmcm9tICdhc3NlcnQnXG5cbi8qXG4gIEltbWVkaWF0ZWx5IGV4ZWN1dGUgbWlkZGxld2FyZVxuICBOb3RlOiBDaGVjayBncmFwaEludGVyY2VwdGlvbiBtZXRob2QgXCJoYW5kbGVNaWRkbGV3YXJlTmV4dENhbGxcIlxuKi9cbmV4cG9ydCBjb25zdCBpbW1lZGlhdGVseUV4ZWN1dGVNaWRkbGV3YXJlID0gYXN5bmMgKHsgc3RhZ2VOb2RlLCBwcm9jZXNzTm9kZSwgZ3JhcGggPSB0aGlzLCBuZXh0UHJvY2Vzc0RhdGEgfSwgeyBhZGRpdGlvbmFsUGFyYW1ldGVyLCB0cmF2ZXJzZUNhbGxDb250ZXh0IH0pID0+IHtcbiAgY29uc3QgeyBuZXh0RnVuY3Rpb24gfSA9IGFkZGl0aW9uYWxQYXJhbWV0ZXJcbiAgYXNzZXJ0KGdyYXBoLmNvbnRleHQubWlkZGxld2FyZVBhcmFtZXRlcj8uY29udGV4dCwgYOKAoiBNaWRkbGV3YXJlIGdyYXBoIHRyYXZlcnNhbCByZWxpZXMgb24gY29udGV4dC5taWRkbGV3YXJlUGFyYW1ldGVyLmNvbnRleHQgb24gdGhlIGdyYXBoIGNvbnRleHQgaW5zdGFuY2VgKVxuXG4gIGxldCBmdW5jdGlvbkNhbGxiYWNrID0gYXdhaXQgZ3JhcGgudHJhdmVyc2VySW5zdHJ1Y3Rpb24ucmVzb3VyY2VSZXNvbHV0aW9uLnJlc29sdmVSZXNvdXJjZSh7IHRhcmdldE5vZGU6IHByb2Nlc3NOb2RlLCBncmFwaCwgY29udGV4dFByb3BlcnR5TmFtZTogJ2Z1bmN0aW9uUmVmZXJlbmNlQ29udGV4dCcgfSlcblxuICB0cnkge1xuICAgIGxldCBtaWRkbGV3YXJlID0gYXdhaXQgZnVuY3Rpb25DYWxsYmFjayh7IG5vZGU6IHByb2Nlc3NOb2RlLCBncmFwaCB9KSAvLyBleHBlY3RlZCB0byByZXR1cm4gYSBLb2EgbWlkZGxld2FyZSBjb21wbHlpbmcgZnVuY3Rpb24uXG4gICAgbGV0IGNvbnRleHQgPSBncmFwaC5jb250ZXh0Lm1pZGRsZXdhcmVQYXJhbWV0ZXIuY29udGV4dCxcbiAgICAgIG5leHQgPSBuZXh0RnVuY3Rpb25cbiAgICBhd2FpdCBtaWRkbGV3YXJlKGNvbnRleHQsIG5leHQpIC8vIGV4ZWN1dGUgbWlkZGxld2FyZVxuICAgIHJldHVybiBtaWRkbGV3YXJlIC8vIGFsbG93IHRvIGFnZ3JlZ2F0ZSBtaWRkbGV3YXJlIGZ1bmN0aW9uIGZvciBkZWJ1Z2dpbmcgcHVycG9zZXMuXG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcihlcnJvcikgJiYgcHJvY2Vzcy5leGl0KClcbiAgfVxufVxuIl19