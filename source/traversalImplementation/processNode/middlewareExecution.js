"use strict";var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");Object.defineProperty(exports, "__esModule", { value: true });exports.immediatelyExecuteMiddleware = void 0;var _assert = _interopRequireDefault(require("assert"));






const immediatelyExecuteMiddleware = async function ({ stageNode, processNode, graph = this, nextProcessData }, { additionalParameter, traverseCallContext }) {

  (0, _assert.default)(graph.context.middlewareParameter, `â€¢ Middleware graph traversal relies on context.middlewareParameter on the graph context instance`);

  const { nextFunction } = additionalParameter;

  let functionCallback = await graph.traverserInstruction.resourceResolution.resolveResource({ targetNode: processNode, graph, contextPropertyName: 'functionReferenceContext' });

  try {


    let middlewareExecution = await functionCallback({ node: processNode, graph });
    await middlewareExecution(nextFunction);
    return middlewareExecution;
  } catch (error) {
    console.error(error) && process.exit();
  }
};exports.immediatelyExecuteMiddleware = immediatelyExecuteMiddleware;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NvdXJjZS90cmF2ZXJzYWxJbXBsZW1lbnRhdGlvbi9wcm9jZXNzTm9kZS9taWRkbGV3YXJlRXhlY3V0aW9uLmpzIl0sIm5hbWVzIjpbImltbWVkaWF0ZWx5RXhlY3V0ZU1pZGRsZXdhcmUiLCJzdGFnZU5vZGUiLCJwcm9jZXNzTm9kZSIsImdyYXBoIiwibmV4dFByb2Nlc3NEYXRhIiwiYWRkaXRpb25hbFBhcmFtZXRlciIsInRyYXZlcnNlQ2FsbENvbnRleHQiLCJjb250ZXh0IiwibWlkZGxld2FyZVBhcmFtZXRlciIsIm5leHRGdW5jdGlvbiIsImZ1bmN0aW9uQ2FsbGJhY2siLCJ0cmF2ZXJzZXJJbnN0cnVjdGlvbiIsInJlc291cmNlUmVzb2x1dGlvbiIsInJlc29sdmVSZXNvdXJjZSIsInRhcmdldE5vZGUiLCJjb250ZXh0UHJvcGVydHlOYW1lIiwibWlkZGxld2FyZUV4ZWN1dGlvbiIsIm5vZGUiLCJlcnJvciIsImNvbnNvbGUiLCJwcm9jZXNzIiwiZXhpdCJdLCJtYXBwaW5ncyI6IjhNQUFBOzs7Ozs7O0FBT08sTUFBTUEsNEJBQTRCLEdBQUcsZ0JBQWUsRUFBRUMsU0FBRixFQUFhQyxXQUFiLEVBQTBCQyxLQUFLLEdBQUcsSUFBbEMsRUFBd0NDLGVBQXhDLEVBQWYsRUFBMEUsRUFBRUMsbUJBQUYsRUFBdUJDLG1CQUF2QixFQUExRSxFQUF3SDs7QUFFbEssdUJBQU9ILEtBQUssQ0FBQ0ksT0FBTixDQUFjQyxtQkFBckIsRUFBMkMsa0dBQTNDOztBQUVBLFFBQU0sRUFBRUMsWUFBRixLQUFtQkosbUJBQXpCOztBQUVBLE1BQUlLLGdCQUFnQixHQUFHLE1BQU1QLEtBQUssQ0FBQ1Esb0JBQU4sQ0FBMkJDLGtCQUEzQixDQUE4Q0MsZUFBOUMsQ0FBOEQsRUFBRUMsVUFBVSxFQUFFWixXQUFkLEVBQTJCQyxLQUEzQixFQUFrQ1ksbUJBQW1CLEVBQUUsMEJBQXZELEVBQTlELENBQTdCOztBQUVBLE1BQUk7OztBQUdGLFFBQUlDLG1CQUFtQixHQUFHLE1BQU1OLGdCQUFnQixDQUFDLEVBQUVPLElBQUksRUFBRWYsV0FBUixFQUFxQkMsS0FBckIsRUFBRCxDQUFoRDtBQUNBLFVBQU1hLG1CQUFtQixDQUFDUCxZQUFELENBQXpCO0FBQ0EsV0FBT08sbUJBQVA7QUFDRCxHQU5ELENBTUUsT0FBT0UsS0FBUCxFQUFjO0FBQ2RDLElBQUFBLE9BQU8sQ0FBQ0QsS0FBUixDQUFjQSxLQUFkLEtBQXdCRSxPQUFPLENBQUNDLElBQVIsRUFBeEI7QUFDRDtBQUNGLENBakJNLEMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgYXNzZXJ0IGZyb20gJ2Fzc2VydCdcblxuLypcbiAgSW1tZWRpYXRlbHkgZXhlY3V0ZSBtaWRkbGV3YXJlXG4gIFRoZSBtaWRkbGV3YXJlIGdyYXBoIGlzIG9ubHkgcmVzcG9uc2libGUgZm9yIGNoYWluaW5nIGFuZCBleGVjdXRpbmcgbWlkZGxld2FyZXMsIGFuZCBub3QgcmVzcG9uc2libGUgZm9yIHBhc3NpbmcgJ2NvbnRleHQnIHBhcmFtZXRlci4gQXMgdGhlIG1pZGRsZXdhcmVzIHNob3VsZCBiZSBhbHJlYWR5IHBhcmlhbGx5IGFwcGxpZWQgb3IgY3VycmllZCB3aXRoIGNvbnRleHQgcGFyYW1ldGVyIG91dHNpZGUgZ3JhcGggdHJhdmVyc2FsLlxuICBOb3RlOiBDaGVjayBncmFwaEludGVyY2VwdGlvbiBtZXRob2QgXCJoYW5kbGVNaWRkbGV3YXJlTmV4dENhbGxcIlxuKi9cbmV4cG9ydCBjb25zdCBpbW1lZGlhdGVseUV4ZWN1dGVNaWRkbGV3YXJlID0gYXN5bmMgZnVuY3Rpb24oeyBzdGFnZU5vZGUsIHByb2Nlc3NOb2RlLCBncmFwaCA9IHRoaXMsIG5leHRQcm9jZXNzRGF0YSB9LCB7IGFkZGl0aW9uYWxQYXJhbWV0ZXIsIHRyYXZlcnNlQ2FsbENvbnRleHQgfSkge1xuICAvLyBUT0RPOiBwcmV2aW91c2x5IGRlcGVuZGVudCBvbiBleHRlcm5hbCB2YWx1ZSBgbWlkZGxld2FyZVBhcmFtZXRlcmAuXG4gIGFzc2VydChncmFwaC5jb250ZXh0Lm1pZGRsZXdhcmVQYXJhbWV0ZXIsIGDigKIgTWlkZGxld2FyZSBncmFwaCB0cmF2ZXJzYWwgcmVsaWVzIG9uIGNvbnRleHQubWlkZGxld2FyZVBhcmFtZXRlciBvbiB0aGUgZ3JhcGggY29udGV4dCBpbnN0YW5jZWApXG5cbiAgY29uc3QgeyBuZXh0RnVuY3Rpb24gfSA9IGFkZGl0aW9uYWxQYXJhbWV0ZXJcblxuICBsZXQgZnVuY3Rpb25DYWxsYmFjayA9IGF3YWl0IGdyYXBoLnRyYXZlcnNlckluc3RydWN0aW9uLnJlc291cmNlUmVzb2x1dGlvbi5yZXNvbHZlUmVzb3VyY2UoeyB0YXJnZXROb2RlOiBwcm9jZXNzTm9kZSwgZ3JhcGgsIGNvbnRleHRQcm9wZXJ0eU5hbWU6ICdmdW5jdGlvblJlZmVyZW5jZUNvbnRleHQnIH0pXG5cbiAgdHJ5IHtcbiAgICAvLyB0aGlzIGZ1bmN0aW9uIG11c3QgcmVjZWl2ZSBvbmx5IGEgc2luZ2xlIHBhcmFtZXRlciBcIm5leHRcIiwgdXNlZCBmb3IgZXhlY3V0aW5nIHRoZSBtaWRkbGV3YXJlIGFuZCBzdWNjZWVkaW5nIHRoZSBjdXJyZW50IG1pZGRsZXdhcmUsIHdoZW4gZmluaXNoZWQuIFRoZSBjb250ZXh0IGlzIHBhc3NlZCB0byB0aGUgZnVuY2l0b24gZXh0ZXJuYWxseSBieSBjdXJyeWluZy5cbiAgICAvLyBAcGFyYW0gVHJhdmVyc2VyU3RhdGUgPE9iamVjdD4gLSBQYXNzaW5nIGEgc2luZ2xlIHRyYXZlcnNlciBzdGF0ZSwgYWxsb3dzIGZvciBlYXNpZXIgY2hhbmdlcy9yZWZhY3RvcmluZyB0byBiZSBtYWRlLlxuICAgIGxldCBtaWRkbGV3YXJlRXhlY3V0aW9uID0gYXdhaXQgZnVuY3Rpb25DYWxsYmFjayh7IG5vZGU6IHByb2Nlc3NOb2RlLCBncmFwaCB9KSAvLyBleHBlY3RlZCB0byByZXR1cm4gYSBLb2EgbWlkZGxld2FyZSBjb21wbHlpbmcgZnVuY3Rpb24uXG4gICAgYXdhaXQgbWlkZGxld2FyZUV4ZWN1dGlvbihuZXh0RnVuY3Rpb24pIC8vIGV4ZWN1dGUgbWlkZGxld2FyZVxuICAgIHJldHVybiBtaWRkbGV3YXJlRXhlY3V0aW9uIC8vIGFsbG93IHRvIGFnZ3JlZ2F0ZSBtaWRkbGV3YXJlIGZ1bmN0aW9uIGZvciBkZWJ1Z2dpbmcgcHVycG9zZXMuXG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcihlcnJvcikgJiYgcHJvY2Vzcy5leGl0KClcbiAgfVxufVxuIl19