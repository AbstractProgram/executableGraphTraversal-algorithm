"use strict";var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");Object.defineProperty(exports, "__esModule", { value: true });exports.immediatelyExecuteMiddleware = void 0;var _assert = _interopRequireDefault(require("assert"));






const immediatelyExecuteMiddleware = async function ({ stageNode, processNode, traverser = this, nextProcessData }, { additionalParameter, traverseCallContext }) {

  (0, _assert.default)(traverser.context.middlewareParameter, `â€¢ Middleware graph traversal relies on context.middlewareParameter on the traverser context instance`);

  const { nextFunction } = additionalParameter;

  let functionCallback = await traverser.traverserInstruction.resourceResolution.resolveResource.call(traverser, { targetNode: processNode, contextPropertyName: 'functionReferenceContext' });

  try {


    let middlewareExecution = await functionCallback({ node: processNode, traverser });
    await middlewareExecution(nextFunction);
    return middlewareExecution;
  } catch (error) {
    console.error(error) && process.exit();
  }
};exports.immediatelyExecuteMiddleware = immediatelyExecuteMiddleware;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NvdXJjZS90cmF2ZXJzYWxJbXBsZW1lbnRhdGlvbi9wcm9jZXNzTm9kZS9taWRkbGV3YXJlRXhlY3V0aW9uLmpzIl0sIm5hbWVzIjpbImltbWVkaWF0ZWx5RXhlY3V0ZU1pZGRsZXdhcmUiLCJzdGFnZU5vZGUiLCJwcm9jZXNzTm9kZSIsInRyYXZlcnNlciIsIm5leHRQcm9jZXNzRGF0YSIsImFkZGl0aW9uYWxQYXJhbWV0ZXIiLCJ0cmF2ZXJzZUNhbGxDb250ZXh0IiwiY29udGV4dCIsIm1pZGRsZXdhcmVQYXJhbWV0ZXIiLCJuZXh0RnVuY3Rpb24iLCJmdW5jdGlvbkNhbGxiYWNrIiwidHJhdmVyc2VySW5zdHJ1Y3Rpb24iLCJyZXNvdXJjZVJlc29sdXRpb24iLCJyZXNvbHZlUmVzb3VyY2UiLCJ0YXJnZXROb2RlIiwiY29udGV4dFByb3BlcnR5TmFtZSIsIm1pZGRsZXdhcmVFeGVjdXRpb24iLCJub2RlIiwiZXJyb3IiLCJjb25zb2xlIiwicHJvY2VzcyIsImV4aXQiXSwibWFwcGluZ3MiOiI4TUFBQTs7Ozs7OztBQU9PLE1BQU1BLDRCQUE0QixHQUFHLGdCQUFlLEVBQUVDLFNBQUYsRUFBYUMsV0FBYixFQUEwQkMsU0FBUyxHQUFHLElBQXRDLEVBQTRDQyxlQUE1QyxFQUFmLEVBQThFLEVBQUVDLG1CQUFGLEVBQXVCQyxtQkFBdkIsRUFBOUUsRUFBNEg7O0FBRXRLLHVCQUFPSCxTQUFTLENBQUNJLE9BQVYsQ0FBa0JDLG1CQUF6QixFQUErQyxzR0FBL0M7O0FBRUEsUUFBTSxFQUFFQyxZQUFGLEtBQW1CSixtQkFBekI7O0FBRUEsTUFBSUssZ0JBQWdCLEdBQUcsTUFBaUJQLFNBQVMsQ0FBQ1Esb0JBQVYsQ0FBK0JDLGtCQUEvQixDQUFrREMsZUFBN0QsTUFBQVYsU0FBUyxFQUFvRSxFQUFFVyxVQUFVLEVBQUVaLFdBQWQsRUFBMkJhLG1CQUFtQixFQUFFLDBCQUFoRCxFQUFwRSxDQUF0Qzs7QUFFQSxNQUFJOzs7QUFHRixRQUFJQyxtQkFBbUIsR0FBRyxNQUFNTixnQkFBZ0IsQ0FBQyxFQUFFTyxJQUFJLEVBQUVmLFdBQVIsRUFBcUJDLFNBQXJCLEVBQUQsQ0FBaEQ7QUFDQSxVQUFNYSxtQkFBbUIsQ0FBQ1AsWUFBRCxDQUF6QjtBQUNBLFdBQU9PLG1CQUFQO0FBQ0QsR0FORCxDQU1FLE9BQU9FLEtBQVAsRUFBYztBQUNkQyxJQUFBQSxPQUFPLENBQUNELEtBQVIsQ0FBY0EsS0FBZCxLQUF3QkUsT0FBTyxDQUFDQyxJQUFSLEVBQXhCO0FBQ0Q7QUFDRixDQWpCTSxDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGFzc2VydCBmcm9tICdhc3NlcnQnXG5cbi8qXG4gIEltbWVkaWF0ZWx5IGV4ZWN1dGUgbWlkZGxld2FyZVxuICBUaGUgbWlkZGxld2FyZSBncmFwaCBpcyBvbmx5IHJlc3BvbnNpYmxlIGZvciBjaGFpbmluZyBhbmQgZXhlY3V0aW5nIG1pZGRsZXdhcmVzLCBhbmQgbm90IHJlc3BvbnNpYmxlIGZvciBwYXNzaW5nICdjb250ZXh0JyBwYXJhbWV0ZXIuIEFzIHRoZSBtaWRkbGV3YXJlcyBzaG91bGQgYmUgYWxyZWFkeSBwYXJpYWxseSBhcHBsaWVkIG9yIGN1cnJpZWQgd2l0aCBjb250ZXh0IHBhcmFtZXRlciBvdXRzaWRlIGdyYXBoIHRyYXZlcnNhbC5cbiAgTm90ZTogQ2hlY2sgZ3JhcGhJbnRlcmNlcHRpb24gbWV0aG9kIFwiaGFuZGxlTWlkZGxld2FyZU5leHRDYWxsXCJcbiovXG5leHBvcnQgY29uc3QgaW1tZWRpYXRlbHlFeGVjdXRlTWlkZGxld2FyZSA9IGFzeW5jIGZ1bmN0aW9uKHsgc3RhZ2VOb2RlLCBwcm9jZXNzTm9kZSwgdHJhdmVyc2VyID0gdGhpcywgbmV4dFByb2Nlc3NEYXRhIH0sIHsgYWRkaXRpb25hbFBhcmFtZXRlciwgdHJhdmVyc2VDYWxsQ29udGV4dCB9KSB7XG4gIC8vIFRPRE86IHByZXZpb3VzbHkgZGVwZW5kZW50IG9uIGV4dGVybmFsIHZhbHVlIGBtaWRkbGV3YXJlUGFyYW1ldGVyYC5cbiAgYXNzZXJ0KHRyYXZlcnNlci5jb250ZXh0Lm1pZGRsZXdhcmVQYXJhbWV0ZXIsIGDigKIgTWlkZGxld2FyZSBncmFwaCB0cmF2ZXJzYWwgcmVsaWVzIG9uIGNvbnRleHQubWlkZGxld2FyZVBhcmFtZXRlciBvbiB0aGUgdHJhdmVyc2VyIGNvbnRleHQgaW5zdGFuY2VgKVxuXG4gIGNvbnN0IHsgbmV4dEZ1bmN0aW9uIH0gPSBhZGRpdGlvbmFsUGFyYW1ldGVyXG5cbiAgbGV0IGZ1bmN0aW9uQ2FsbGJhY2sgPSBhd2FpdCB0cmF2ZXJzZXI6OnRyYXZlcnNlci50cmF2ZXJzZXJJbnN0cnVjdGlvbi5yZXNvdXJjZVJlc29sdXRpb24ucmVzb2x2ZVJlc291cmNlKHsgdGFyZ2V0Tm9kZTogcHJvY2Vzc05vZGUsIGNvbnRleHRQcm9wZXJ0eU5hbWU6ICdmdW5jdGlvblJlZmVyZW5jZUNvbnRleHQnIH0pXG5cbiAgdHJ5IHtcbiAgICAvLyB0aGlzIGZ1bmN0aW9uIG11c3QgcmVjZWl2ZSBvbmx5IGEgc2luZ2xlIHBhcmFtZXRlciBcIm5leHRcIiwgdXNlZCBmb3IgZXhlY3V0aW5nIHRoZSBtaWRkbGV3YXJlIGFuZCBzdWNjZWVkaW5nIHRoZSBjdXJyZW50IG1pZGRsZXdhcmUsIHdoZW4gZmluaXNoZWQuIFRoZSBjb250ZXh0IGlzIHBhc3NlZCB0byB0aGUgZnVuY2l0b24gZXh0ZXJuYWxseSBieSBjdXJyeWluZy5cbiAgICAvLyBAcGFyYW0gVHJhdmVyc2VyU3RhdGUgPE9iamVjdD4gLSBQYXNzaW5nIGEgc2luZ2xlIHRyYXZlcnNlciBzdGF0ZSwgYWxsb3dzIGZvciBlYXNpZXIgY2hhbmdlcy9yZWZhY3RvcmluZyB0byBiZSBtYWRlLlxuICAgIGxldCBtaWRkbGV3YXJlRXhlY3V0aW9uID0gYXdhaXQgZnVuY3Rpb25DYWxsYmFjayh7IG5vZGU6IHByb2Nlc3NOb2RlLCB0cmF2ZXJzZXIgfSkgLy8gZXhwZWN0ZWQgdG8gcmV0dXJuIGEgS29hIG1pZGRsZXdhcmUgY29tcGx5aW5nIGZ1bmN0aW9uLlxuICAgIGF3YWl0IG1pZGRsZXdhcmVFeGVjdXRpb24obmV4dEZ1bmN0aW9uKSAvLyBleGVjdXRlIG1pZGRsZXdhcmVcbiAgICByZXR1cm4gbWlkZGxld2FyZUV4ZWN1dGlvbiAvLyBhbGxvdyB0byBhZ2dyZWdhdGUgbWlkZGxld2FyZSBmdW5jdGlvbiBmb3IgZGVidWdnaW5nIHB1cnBvc2VzLlxuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNvbnNvbGUuZXJyb3IoZXJyb3IpICYmIHByb2Nlc3MuZXhpdCgpXG4gIH1cbn1cbiJdfQ==