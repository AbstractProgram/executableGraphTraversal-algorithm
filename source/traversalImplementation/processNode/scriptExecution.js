"use strict";var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");Object.defineProperty(exports, "__esModule", { value: true });exports.executeShellscriptFile = executeShellscriptFile;exports.executeScriptSpawn = executeScriptSpawn;var _path = _interopRequireDefault(require("path"));

var _child_process = require("child_process");


async function executeShellscriptFile({ stageNode, processNode, traverser = this, nextProcessData }, { additionalParameter, traverseCallContext }) {
  let message = ` _____                          _        
  | ____|__  __ ___   ___  _   _ | |_  ___ 
  |  _|  \\ \\/ // _ \\ / __|| | | || __|/ _ \\
  | |___  >  <|  __/| (__ | |_| || |_|  __/    
  |_____|/_/\\_\\\\___| \\___| \\__,_| \\__|\\___|`;

  let scriptPath = await traverser.traverserInstruction.resourceResolution.resolveResource.call(traverser, { targetNode: processNode, contextPropertyName: 'fileContext' });

  try {
    console.log(message);
    console.log(`\x1b[45m%s\x1b[0m`, `shellscript path: ${scriptPath}`);
    (0, _child_process.execSync)(`sh ${scriptPath}`, { cwd: _path.default.dirname(scriptPath), shell: true, stdio: ['inherit', 'inherit', 'inherit'] });
  } catch (error) {
    throw error;
    process.exit(1);
  }

  return null;
}








async function executeScriptSpawn({ stageNode, processNode, traverser = this, nextProcessData }, { additionalParameter, traverseCallContext }) {
  let childProcess;
  try {
    let command = processNode.properties.command,
    argument = processNode.properties.argument.join(' '),
    option = JSON.stringify(processNode.properties.option);
    console.log(`\x1b[45m%s\x1b[0m`, `${command} ${argument}`);
    childProcess = (0, _child_process.spawnSync)(command, argument, option);
    if (childProcess.status > 0) throw childProcess.error;
  } catch (error) {
    process.exit(childProcess.status);
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NvdXJjZS90cmF2ZXJzYWxJbXBsZW1lbnRhdGlvbi9wcm9jZXNzTm9kZS9zY3JpcHRFeGVjdXRpb24uanMiXSwibmFtZXMiOlsiZXhlY3V0ZVNoZWxsc2NyaXB0RmlsZSIsInN0YWdlTm9kZSIsInByb2Nlc3NOb2RlIiwidHJhdmVyc2VyIiwibmV4dFByb2Nlc3NEYXRhIiwiYWRkaXRpb25hbFBhcmFtZXRlciIsInRyYXZlcnNlQ2FsbENvbnRleHQiLCJtZXNzYWdlIiwic2NyaXB0UGF0aCIsInRyYXZlcnNlckluc3RydWN0aW9uIiwicmVzb3VyY2VSZXNvbHV0aW9uIiwicmVzb2x2ZVJlc291cmNlIiwidGFyZ2V0Tm9kZSIsImNvbnRleHRQcm9wZXJ0eU5hbWUiLCJjb25zb2xlIiwibG9nIiwiY3dkIiwicGF0aCIsImRpcm5hbWUiLCJzaGVsbCIsInN0ZGlvIiwiZXJyb3IiLCJwcm9jZXNzIiwiZXhpdCIsImV4ZWN1dGVTY3JpcHRTcGF3biIsImNoaWxkUHJvY2VzcyIsImNvbW1hbmQiLCJwcm9wZXJ0aWVzIiwiYXJndW1lbnQiLCJqb2luIiwib3B0aW9uIiwiSlNPTiIsInN0cmluZ2lmeSIsInN0YXR1cyJdLCJtYXBwaW5ncyI6IndRQUFBOztBQUVBOzs7QUFHTyxlQUFlQSxzQkFBZixDQUFzQyxFQUFFQyxTQUFGLEVBQWFDLFdBQWIsRUFBMEJDLFNBQVMsR0FBRyxJQUF0QyxFQUE0Q0MsZUFBNUMsRUFBdEMsRUFBcUcsRUFBRUMsbUJBQUYsRUFBdUJDLG1CQUF2QixFQUFyRyxFQUFtSjtBQUN4SixNQUFJQyxPQUFPLEdBQUk7Ozs7bURBQWY7O0FBTUEsTUFBSUMsVUFBVSxHQUFHLE1BQWlCTCxTQUFTLENBQUNNLG9CQUFWLENBQStCQyxrQkFBL0IsQ0FBa0RDLGVBQTdELE1BQUFSLFNBQVMsRUFBb0UsRUFBRVMsVUFBVSxFQUFFVixXQUFkLEVBQTJCVyxtQkFBbUIsRUFBRSxhQUFoRCxFQUFwRSxDQUFoQzs7QUFFQSxNQUFJO0FBQ0ZDLElBQUFBLE9BQU8sQ0FBQ0MsR0FBUixDQUFZUixPQUFaO0FBQ0FPLElBQUFBLE9BQU8sQ0FBQ0MsR0FBUixDQUFhLG1CQUFiLEVBQWtDLHFCQUFvQlAsVUFBVyxFQUFqRTtBQUNBLGlDQUFVLE1BQUtBLFVBQVcsRUFBMUIsRUFBNkIsRUFBRVEsR0FBRyxFQUFFQyxjQUFLQyxPQUFMLENBQWFWLFVBQWIsQ0FBUCxFQUFpQ1csS0FBSyxFQUFFLElBQXhDLEVBQThDQyxLQUFLLEVBQUUsQ0FBQyxTQUFELEVBQVksU0FBWixFQUF1QixTQUF2QixDQUFyRCxFQUE3QjtBQUNELEdBSkQsQ0FJRSxPQUFPQyxLQUFQLEVBQWM7QUFDZCxVQUFNQSxLQUFOO0FBQ0FDLElBQUFBLE9BQU8sQ0FBQ0MsSUFBUixDQUFhLENBQWI7QUFDRDs7QUFFRCxTQUFPLElBQVA7QUFDRDs7Ozs7Ozs7O0FBU00sZUFBZUMsa0JBQWYsQ0FBa0MsRUFBRXZCLFNBQUYsRUFBYUMsV0FBYixFQUEwQkMsU0FBUyxHQUFHLElBQXRDLEVBQTRDQyxlQUE1QyxFQUFsQyxFQUFpRyxFQUFFQyxtQkFBRixFQUF1QkMsbUJBQXZCLEVBQWpHLEVBQStJO0FBQ3BKLE1BQUltQixZQUFKO0FBQ0EsTUFBSTtBQUNGLFFBQUlDLE9BQU8sR0FBR3hCLFdBQVcsQ0FBQ3lCLFVBQVosQ0FBdUJELE9BQXJDO0FBQ0VFLElBQUFBLFFBQVEsR0FBRzFCLFdBQVcsQ0FBQ3lCLFVBQVosQ0FBdUJDLFFBQXZCLENBQWdDQyxJQUFoQyxDQUFxQyxHQUFyQyxDQURiO0FBRUVDLElBQUFBLE1BQU0sR0FBR0MsSUFBSSxDQUFDQyxTQUFMLENBQWU5QixXQUFXLENBQUN5QixVQUFaLENBQXVCRyxNQUF0QyxDQUZYO0FBR0FoQixJQUFBQSxPQUFPLENBQUNDLEdBQVIsQ0FBYSxtQkFBYixFQUFrQyxHQUFFVyxPQUFRLElBQUdFLFFBQVMsRUFBeEQ7QUFDQUgsSUFBQUEsWUFBWSxHQUFHLDhCQUFVQyxPQUFWLEVBQW1CRSxRQUFuQixFQUE2QkUsTUFBN0IsQ0FBZjtBQUNBLFFBQUlMLFlBQVksQ0FBQ1EsTUFBYixHQUFzQixDQUExQixFQUE2QixNQUFNUixZQUFZLENBQUNKLEtBQW5CO0FBQzlCLEdBUEQsQ0FPRSxPQUFPQSxLQUFQLEVBQWM7QUFDZEMsSUFBQUEsT0FBTyxDQUFDQyxJQUFSLENBQWFFLFlBQVksQ0FBQ1EsTUFBMUI7QUFDRDtBQUNGIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHBhdGggZnJvbSAncGF0aCdcbmltcG9ydCBhc3NlcnQgZnJvbSAnYXNzZXJ0J1xuaW1wb3J0IHsgZXhlYywgZXhlY1N5bmMsIHNwYXduLCBzcGF3blN5bmMgfSBmcm9tICdjaGlsZF9wcm9jZXNzJ1xuXG4vLyBFeGVjdXRlIHRhc2sgc2NyaXB0IGluIHRoZSBzYW1lIHByb2Nlc3MgKG5vZGVqcyBjaGlsZHByb2Nlc3MuZXhlY1N5bmMpIHVzaW5nIGEgcmVmZXJlbmNlIHNjcmlwdFBhdGggcHJvcGVydHkuIC0gIFJlbGllcyBvbiBmdW5jdGlvbiByZWZlcmVuY2UgY29uY2VwdC5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBleGVjdXRlU2hlbGxzY3JpcHRGaWxlKHsgc3RhZ2VOb2RlLCBwcm9jZXNzTm9kZSwgdHJhdmVyc2VyID0gdGhpcywgbmV4dFByb2Nlc3NEYXRhIH0sIHsgYWRkaXRpb25hbFBhcmFtZXRlciwgdHJhdmVyc2VDYWxsQ29udGV4dCB9KSB7XG4gIGxldCBtZXNzYWdlID0gYCBfX19fXyAgICAgICAgICAgICAgICAgICAgICAgICAgXyAgICAgICAgXG4gIHwgX19fX3xfXyAgX18gX19fICAgX19fICBfICAgXyB8IHxfICBfX18gXG4gIHwgIF98ICBcXFxcIFxcXFwvIC8vIF8gXFxcXCAvIF9ffHwgfCB8IHx8IF9ffC8gXyBcXFxcXG4gIHwgfF9fXyAgPiAgPHwgIF9fL3wgKF9fIHwgfF98IHx8IHxffCAgX18vICAgIFxuICB8X19fX198L18vXFxcXF9cXFxcXFxcXF9fX3wgXFxcXF9fX3wgXFxcXF9fLF98IFxcXFxfX3xcXFxcX19ffGBcblxuICBsZXQgc2NyaXB0UGF0aCA9IGF3YWl0IHRyYXZlcnNlcjo6dHJhdmVyc2VyLnRyYXZlcnNlckluc3RydWN0aW9uLnJlc291cmNlUmVzb2x1dGlvbi5yZXNvbHZlUmVzb3VyY2UoeyB0YXJnZXROb2RlOiBwcm9jZXNzTm9kZSwgY29udGV4dFByb3BlcnR5TmFtZTogJ2ZpbGVDb250ZXh0JyB9KVxuXG4gIHRyeSB7XG4gICAgY29uc29sZS5sb2cobWVzc2FnZSlcbiAgICBjb25zb2xlLmxvZyhgXFx4MWJbNDVtJXNcXHgxYlswbWAsIGBzaGVsbHNjcmlwdCBwYXRoOiAke3NjcmlwdFBhdGh9YClcbiAgICBleGVjU3luYyhgc2ggJHtzY3JpcHRQYXRofWAsIHsgY3dkOiBwYXRoLmRpcm5hbWUoc2NyaXB0UGF0aCksIHNoZWxsOiB0cnVlLCBzdGRpbzogWydpbmhlcml0JywgJ2luaGVyaXQnLCAnaW5oZXJpdCddIH0pXG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgdGhyb3cgZXJyb3JcbiAgICBwcm9jZXNzLmV4aXQoMSlcbiAgfVxuICAvLyBhd2FpdCBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHNldFRpbWVvdXQocmVzb2x2ZSwgNTAwKSkgLy8gd2FpdCB4IHNlY29uZHMgYmVmb3JlIG5leHQgc2NyaXB0IGV4ZWN1dGlvbiAvLyBpbXBvcnRhbnQgdG8gcHJldmVudCAndW5hYmxlIHRvIHJlLW9wZW4gc3RkaW4nIGVycm9yIGJldHdlZW4gc2hlbGxzLlxuICByZXR1cm4gbnVsbFxufVxuXG4vKipcbiAgUnVuIGNoaWxkcHJvY2VzcyBzeW5jaG5vbG91cyBzcGF3biBjb21tYW5kOiBcbiAgUmVxdWlyZWQgcHJvcGVydGllcyBvbiBwcm9jZXNzIG5vZGU6IFxuICBAcGFyYW0ge1N0cmluZ30gY29tbWFuZFxuICBAcGFyYW0ge1N0cmluZ1tdfSBhcmd1bWVudFxuICBAcGFyYW0ge0pzb24gc3RyaW5naWZpZXMgc3RyaW5nfSBvcHRpb25cbiovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZXhlY3V0ZVNjcmlwdFNwYXduKHsgc3RhZ2VOb2RlLCBwcm9jZXNzTm9kZSwgdHJhdmVyc2VyID0gdGhpcywgbmV4dFByb2Nlc3NEYXRhIH0sIHsgYWRkaXRpb25hbFBhcmFtZXRlciwgdHJhdmVyc2VDYWxsQ29udGV4dCB9KSB7XG4gIGxldCBjaGlsZFByb2Nlc3NcbiAgdHJ5IHtcbiAgICBsZXQgY29tbWFuZCA9IHByb2Nlc3NOb2RlLnByb3BlcnRpZXMuY29tbWFuZCxcbiAgICAgIGFyZ3VtZW50ID0gcHJvY2Vzc05vZGUucHJvcGVydGllcy5hcmd1bWVudC5qb2luKCcgJyksXG4gICAgICBvcHRpb24gPSBKU09OLnN0cmluZ2lmeShwcm9jZXNzTm9kZS5wcm9wZXJ0aWVzLm9wdGlvbilcbiAgICBjb25zb2xlLmxvZyhgXFx4MWJbNDVtJXNcXHgxYlswbWAsIGAke2NvbW1hbmR9ICR7YXJndW1lbnR9YClcbiAgICBjaGlsZFByb2Nlc3MgPSBzcGF3blN5bmMoY29tbWFuZCwgYXJndW1lbnQsIG9wdGlvbilcbiAgICBpZiAoY2hpbGRQcm9jZXNzLnN0YXR1cyA+IDApIHRocm93IGNoaWxkUHJvY2Vzcy5lcnJvclxuICB9IGNhdGNoIChlcnJvcikge1xuICAgIHByb2Nlc3MuZXhpdChjaGlsZFByb2Nlc3Muc3RhdHVzKVxuICB9XG59XG4iXX0=