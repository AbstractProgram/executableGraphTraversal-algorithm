"use strict";var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");Object.defineProperty(exports, "__esModule", { value: true });exports.traverseThenProcessWithLogicalOperator = exports.traverseThenProcess = exports.processThenTraverse = exports.handleMiddlewareNextCall = void 0;var _assert = _interopRequireDefault(require("assert"));



const handleMiddlewareNextCall = ({ dataProcessCallback, targetFunction, aggregator }) => {
  return new Proxy(targetFunction, {
    async apply(target, thisArg, argArray) {
      let { nodeInstance, traversalDepth, eventEmitter } = argArray[0];
      let nextCalled = false;

      const nextFunction = async () => {
        nextCalled = true;
        let traversalResultIterator = await Reflect.apply(...arguments);
        for await (let traversalResult of traversalResultIterator) aggregator.merge(traversalResult.result);
      };

      let result = await dataProcessCallback({ nextProcessData: aggregator.value, additionalParameter: { nextFunction } });
      if (!nextCalled) await nextFunction();

      return traversalDepth == 0 ? aggregator.value : aggregator;
    } });

};exports.handleMiddlewareNextCall = handleMiddlewareNextCall;


const processThenTraverse = ({ dataProcessCallback, targetFunction, aggregator }) => {
  return new Proxy(targetFunction, {
    async apply(target, thisArg, argArray) {
      let { nodeInstance, traversalDepth, eventEmitter } = argArray[0];
      eventEmitter.on('nodeTraversalCompleted', data => {

      });

      let result = await dataProcessCallback({ nextProcessData: aggregator.value, additionalParameter: {} });

      let traversalResultIterator = await Reflect.apply(...arguments);
      for await (let traversalResult of traversalResultIterator) aggregator.merge(traversalResult.result);

      return traversalDepth == 0 ? aggregator.value : aggregator;
    } });

};exports.processThenTraverse = processThenTraverse;


const traverseThenProcess = ({ dataProcessCallback, targetFunction, aggregator }) => {
  return new Proxy(targetFunction, {
    async apply(target, thisArg, argArray) {
      let { nodeInstance, traversalDepth, eventEmitter } = argArray[0];
      eventEmitter.on('nodeTraversalCompleted', data => {

      });

      let traversalResultIterator = await Reflect.apply(...arguments);
      for await (let traversalResult of traversalResultIterator) aggregator.merge(traversalResult.result);

      let result = await dataProcessCallback({ nextProcessData: aggregator.value, additionalParameter: {} });

      return traversalDepth == 0 ? aggregator.value : aggregator;
    } });

};exports.traverseThenProcess = traverseThenProcess;


const traverseThenProcessWithLogicalOperator = ({ dataProcessCallback, targetFunction, aggregator }) => {
  return new Proxy(targetFunction, {
    async apply(target, thisArg, argArray) {
      let { nodeInstance, traversalDepth, eventEmitter } = argArray[0];
      eventEmitter.on('nodeTraversalCompleted', data => {

      });

      let traversalResultIterator = await Reflect.apply(...arguments);
      for await (let traversalResult of traversalResultIterator) {
        let relatedPort = traversalResult.config.port;
        (0, _assert.default)(relatedPort.properties.logicalOperator, `â€¢ port (key="${relatedPort.properties.key}") must have "logicalOperator" property assigned, to aggregate results.`);

        let logicalOperator = relatedPort.properties.logicalOperator;
        aggregator.merge(traversalResult.result, undefined, logicalOperator);
      }

      let result = await dataProcessCallback({ nextProcessData: aggregator.calculatedLogicalOperaion, additionalParameter: {} });

      return traversalDepth == 0 ? [result] : aggregator;
    } });

};exports.traverseThenProcessWithLogicalOperator = traverseThenProcessWithLogicalOperator;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,