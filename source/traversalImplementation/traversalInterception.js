"use strict";var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");Object.defineProperty(exports, "__esModule", { value: true });exports.traverseThenProcessWithLogicalOperator = exports.handleMiddlewareNextCall = exports.traverseThenProcess = exports.processThenTraverse = void 0;var _assert = _interopRequireDefault(require("assert"));


const processThenTraverse = (targetFunction) =>
new Proxy(targetFunction, {
  async apply(target, thisArg, argArray) {
    let { nodeInstance, traversalDepth, eventEmitter, processDataCallback, aggregator } = argArray[0];
    eventEmitter.on('nodeTraversalCompleted', data => {

    });

    let result = await processDataCallback({ nextProcessData: aggregator.value, additionalParameter: {} });

    let traversalIterator = await Reflect.apply(...arguments);
    for await (let traversal of traversalIterator) aggregator.merge(traversal.group.result);

    return traversalDepth == 0 ? aggregator.value : aggregator;
  } });exports.processThenTraverse = processThenTraverse;



const traverseThenProcess = (targetFunction) =>
new Proxy(targetFunction, {
  async apply(target, thisArg, argArray) {
    let { nodeInstance, traversalDepth, eventEmitter, processDataCallback, aggregator } = argArray[0];
    eventEmitter.on('nodeTraversalCompleted', data => {

    });

    let traversalIterator = await Reflect.apply(...arguments);
    for await (let traversal of traversalIterator) aggregator.merge(traversal.group.result);

    let result = await processDataCallback({ nextProcessData: aggregator.value, additionalParameter: {} });

    return traversalDepth == 0 ? aggregator.value : aggregator;
  } });exports.traverseThenProcess = traverseThenProcess;




const handleMiddlewareNextCall = (targetFunction) =>
new Proxy(targetFunction, {
  async apply(target, thisArg, argArray) {
    let { nodeInstance, traversalDepth, eventEmitter, processDataCallback, aggregator } = argArray[0];
    let nextCalled = false;

    const nextFunction = async () => {
      nextCalled = true;
      let traversalIterator = await Reflect.apply(...arguments);
      for await (let traversal of traversalIterator) aggregator.merge(traversal.group.result);
    };

    let result = await processDataCallback({ nextProcessData: aggregator.value, additionalParameter: { nextFunction } });
    if (!nextCalled) await nextFunction();

    return traversalDepth == 0 ? aggregator.value : aggregator;
  } });exports.handleMiddlewareNextCall = handleMiddlewareNextCall;



const traverseThenProcessWithLogicalOperator = (targetFunction) =>
new Proxy(targetFunction, {
  async apply(target, thisArg, argArray) {
    let { nodeInstance, traversalDepth, eventEmitter, processDataCallback, aggregator } = argArray[0];
    eventEmitter.on('nodeTraversalCompleted', data => {

    });

    let traversalIterator = await Reflect.apply(...arguments);
    for await (let traversal of traversalIterator) {
      let relatedPort = traversal.group.config.portNode;
      (0, _assert.default)(relatedPort.properties.logicalOperator, `â€¢ port (key="${relatedPort.properties.key}") must have "logicalOperator" property assigned, to aggregate results.`);

      let logicalOperator = relatedPort.properties.logicalOperator;
      aggregator.merge(traversal.group.result, undefined, logicalOperator);
    }

    let result = await processDataCallback({ nextProcessData: aggregator.calculatedLogicalOperaion, additionalParameter: {} });

    return traversalDepth == 0 ? [result] : aggregator;
  } });exports.traverseThenProcessWithLogicalOperator = traverseThenProcessWithLogicalOperator;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,