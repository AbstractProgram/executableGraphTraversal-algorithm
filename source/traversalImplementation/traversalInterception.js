"use strict";var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");Object.defineProperty(exports, "__esModule", { value: true });exports.traverseThenProcessWithLogicalOperator = exports.handleMiddlewareNextCall = exports.traverseThenProcess = exports.processThenTraverse = void 0;var _assert = _interopRequireDefault(require("assert"));


const processThenTraverse = (targetFunction) =>
new Proxy(targetFunction, {
  async apply(target, thisArg, argArray) {
    let { traverser, processDataCallback } = argArray[0];
    const { eventEmitter, depth, aggregator } = traverser;
    eventEmitter.on('nodeTraversalCompleted', data => {

    });

    if (traverser.shouldExecuteProcess()) {
      let processResult = await processDataCallback({ nextProcessData: aggregator.value, additionalParameter: {} });
      if (traverser.shouldIncludeResult()) aggregator.add(processResult);
    }

    if (traverser.shouldContinue()) {
      let traversalIterator = await Reflect.apply(...arguments);
      for await (let traversal of traversalIterator) aggregator.merge(traversal.group.result);
    }

    return depth == 0 ? aggregator.value : aggregator;
  } });exports.processThenTraverse = processThenTraverse;



const traverseThenProcess = (targetFunction) =>
new Proxy(targetFunction, {
  async apply(target, thisArg, argArray) {
    let { traverser, processDataCallback } = argArray[0];
    const { eventEmitter, depth, aggregator } = traverser;
    eventEmitter.on('nodeTraversalCompleted', data => {

    });

    if (traverser.shouldContinue()) {
      let traversalIterator = await Reflect.apply(...arguments);
      for await (let traversal of traversalIterator) aggregator.merge(traversal.group.result);
    }

    if (traverser.shouldExecuteProcess()) {
      let processResult = await processDataCallback({ nextProcessData: aggregator.value, additionalParameter: {} });
      if (traverser.shouldIncludeResult()) aggregator.add(processResult);
    }

    return depth == 0 ? aggregator.value : aggregator;
  } });exports.traverseThenProcess = traverseThenProcess;




const handleMiddlewareNextCall = (targetFunction) =>
new Proxy(targetFunction, {
  async apply(target, thisArg, argArray) {
    let { traverser, processDataCallback } = argArray[0];
    const { depth, aggregator } = traverser;
    let nextCalled = false;

    const nextFunction = async () => {
      nextCalled = true;
      if (traverser.shouldContinue()) {
        let traversalIterator = await Reflect.apply(...arguments);
        for await (let traversal of traversalIterator) aggregator.merge(traversal.group.result);
      }
    };

    if (traverser.shouldExecuteProcess()) {
      let processResult = await processDataCallback({ nextProcessData: aggregator.value, additionalParameter: { nextFunction } });
      if (traverser.shouldIncludeResult()) aggregator.add(processResult);
    }

    if (!nextCalled) await nextFunction();

    return depth == 0 ? aggregator.value : aggregator;
  } });exports.handleMiddlewareNextCall = handleMiddlewareNextCall;



const traverseThenProcessWithLogicalOperator = (targetFunction) =>
new Proxy(targetFunction, {
  async apply(target, thisArg, argArray) {
    let { traverser, processDataCallback } = argArray[0];
    const { eventEmitter, depth, aggregator } = traverser;
    eventEmitter.on('nodeTraversalCompleted', data => {

    });

    if (traverser.shouldContinue()) {
      let traversalIterator = await Reflect.apply(...arguments);
      for await (let traversal of traversalIterator) {
        let relatedPort = traversal.group.config.portNode;
        (0, _assert.default)(relatedPort.properties.logicalOperator, `â€¢ port (key="${relatedPort.properties.key}") must have "logicalOperator" property assigned, to aggregate results.`);

        let logicalOperator = relatedPort.properties.logicalOperator;
        aggregator.merge(traversal.group.result, undefined, logicalOperator);
      }
    }

    if (traverser.shouldExecuteProcess()) {
      let processResult = await processDataCallback({ nextProcessData: aggregator.calculatedLogicalOperaion, additionalParameter: {} });
      if (traverser.shouldIncludeResult()) aggregator.add(processResult);
    }

    return depth == 0 ? aggregator.processResultArray : aggregator;
  } });exports.traverseThenProcessWithLogicalOperator = traverseThenProcessWithLogicalOperator;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,