"use strict";Object.defineProperty(exports, "__esModule", { value: true });exports.handleMiddlewareNextCall_branchedGraph = exports.handleMiddlewareNextCall_linearGraph = void 0;

const handleMiddlewareNextCall_linearGraph = (targetFunction) =>
new Proxy(targetFunction, {
  async apply(target, thisArg, argArray) {
    let { traverserPosition, processDataCallback } = argArray[0];
    const { depth, aggregator } = traverserPosition;

    let nextCalled = false;





    const nextFunction = async () => {
      nextCalled = true;
      if (traverserPosition.shouldContinue()) {

        let traversalResultIterator = await Reflect.apply(...arguments);
        for await (let traversal of traversalResultIterator) aggregator.merge(traversal.group.result, traversal.group.config);
      }
    };


    let processResult;
    if (traverserPosition.shouldExecuteProcess()) {
      processResult = await processDataCallback({ nextProcessData: aggregator.value, additionalParameter: { nextFunction } });
      if (traverserPosition.shouldIncludeResult()) aggregator.add(processResult);
    }




    if (!nextCalled && !processResult) await nextFunction();


    return depth == 0 ? aggregator.finalResult : aggregator;
  } });exports.handleMiddlewareNextCall_linearGraph = handleMiddlewareNextCall_linearGraph;


const handleMiddlewareNextCall_branchedGraph = (targetFunction) =>
new Proxy(targetFunction, {
  async apply(target, thisArg, argArray) {
    let traverser = thisArg;
    let { groupIterator, traverserPosition, processDataCallback } = argArray[0];
    const { depth, aggregator } = traverserPosition;

    let nextCalled = false;





    const nextFunction = async () => {
      nextCalled = true;
      if (traverserPosition.shouldContinue()) {









        for await (let { group } of groupIterator) traverser.iteratorObjectList.push(group.traversalIterator);
      }

      let nextYielded = await traverser.invokeNextTraversalPromise.call(traverser);
      if (nextYielded) {
        let { traversalPromise, node } = nextYielded;
        let traversalResult = await traversalPromise;
        aggregator.merge([traversalResult]);
      }
    };


    let processResult;
    if (traverserPosition.shouldExecuteProcess()) {
      processResult = await processDataCallback({ nextProcessData: aggregator.value, additionalParameter: { nextFunction } });
      if (traverserPosition.shouldIncludeResult()) aggregator.add(processResult);
    }




    if (!nextCalled && !processResult) await nextFunction();


    return depth == 0 ? aggregator.finalResult : aggregator;
  } });exports.handleMiddlewareNextCall_branchedGraph = handleMiddlewareNextCall_branchedGraph;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,